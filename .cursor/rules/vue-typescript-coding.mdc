# Vue 3 + TypeScript 编码规范

## Vue 组件规范
- 使用 Composition API 和 `<script setup>` 语法
- 组件名使用 PascalCase 命名
- Props 必须定义类型和默认值
- 使用 `defineEmits` 定义事件
- 使用 `defineProps` 定义属性

## TypeScript 规范
- 严格模式：启用 `strict: true`
- 使用类型注解，避免 `any` 类型
- 接口命名使用 PascalCase，以 `I` 开头（如 `IUserInfo`）
- 类型别名使用 PascalCase
- 枚举使用 PascalCase

## 文件命名规范
- Vue 组件文件：kebab-case（如 `user-profile.vue`）
- TypeScript 文件：kebab-case（如 `api-client.ts`）
- 工具函数文件：kebab-case（如 `date-utils.ts`）

## 导入规范
- 使用路径别名（如 `@/components/`）
- 第三方库导入放在最前面
- 相对路径导入放在后面
- 按类型分组：Vue相关、工具函数、类型定义

## 组件结构
```vue
<template>
  <!-- 模板内容 -->
</template>

<script setup lang="ts">
// 导入
import { ref, computed } from 'vue'

// 类型定义
interface Props {
  title: string
  count?: number
}

// Props 和 Emits
const props = defineProps<Props>()
const emit = defineEmits<{
  update: [value: string]
}>()

// 响应式数据
const count = ref(0)

// 计算属性
const doubleCount = computed(() => count.value * 2)

// 方法
const increment = () => {
  count.value++
}
</script>

<style scoped lang="scss">
/* 样式 */
</style>
description:
globs:
alwaysApply: false
---
