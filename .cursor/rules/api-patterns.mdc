# API 接口和HTTP请求指南

## API 架构
项目使用 Axios 作为 HTTP 客户端，配置了统一的请求拦截和错误处理。

## 核心文件
- 请求配置：[src/api/request.ts](mdc:src/api/request.ts)
- 错误处理：[src/api/handleError.ts](mdc:src/api/handleError.ts)

## 请求配置规范
```typescript
// 基础配置
const request = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json'
  }
})

// 请求拦截器
request.interceptors.request.use(
  (config) => {
    // 添加认证token
    const token = localStorage.getItem('token')
    if (token) {
      config.headers.Authorization = `Bearer ${token}`
    }
    return config
  },
  (error) => {
    return Promise.reject(error)
  }
)

// 响应拦截器
request.interceptors.response.use(
  (response) => {
    return response.data
  },
  (error) => {
    handleApiError(error)
    return Promise.reject(error)
  }
)
```

## API 接口定义规范
```typescript
// 接口类型定义
interface IApiResponse<T = any> {
  code: number
  message: string
  data: T
}

interface IUserInfo {
  id: number
  name: string
  email: string
}

// API 函数定义
export const userApi = {
  // 获取用户信息
  getUserInfo: (): Promise<IApiResponse<IUserInfo>> => {
    return request.get('/user/info')
  },
  
  // 更新用户信息
  updateUserInfo: (data: Partial<IUserInfo>): Promise<IApiResponse<IUserInfo>> => {
    return request.put('/user/info', data)
  },
  
  // 删除用户
  deleteUser: (id: number): Promise<IApiResponse<void>> => {
    return request.delete(`/user/${id}`)
  }
}
```

## 错误处理规范
```typescript
// 统一错误处理
export const handleApiError = (error: any) => {
  if (error.response) {
    const { status, data } = error.response
    
    switch (status) {
      case 401:
        // 未授权，跳转登录
        router.push('/login')
        break
      case 403:
        // 权限不足
        ElMessage.error('权限不足')
        break
      case 404:
        // 资源不存在
        ElMessage.error('请求的资源不存在')
        break
      case 500:
        // 服务器错误
        ElMessage.error('服务器内部错误')
        break
      default:
        ElMessage.error(data?.message || '请求失败')
    }
  } else if (error.request) {
    // 网络错误
    ElMessage.error('网络连接失败')
  } else {
    // 其他错误
    ElMessage.error('请求配置错误')
  }
}
```

## 组件中使用
```vue
<script setup lang="ts">
import { userApi } from '@/api/user'

const userInfo = ref<IUserInfo | null>(null)
const loading = ref(false)

const fetchUserInfo = async () => {
  try {
    loading.value = true
    const response = await userApi.getUserInfo()
    userInfo.value = response.data
  } catch (error) {
    console.error('获取用户信息失败:', error)
  } finally {
    loading.value = false
  }
}
</script>
```

## 最佳实践
- 使用 TypeScript 定义接口类型
- 统一错误处理机制
- 合理设置请求超时时间
- 使用环境变量配置 API 地址
- 实现请求重试机制
- 添加请求和响应日志
description:
globs:
alwaysApply: false
---
